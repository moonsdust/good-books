---
title: "My title"
subtitle: "An analysis of solved and unsolved homicides from 2010 to 2017 in the United States's 2 largest cities, New York and Los Angeles"
author: 
  - Emily Su
thanks: "Code and data are available at: [https://github.com/moonsdust/unsolved-murders](https://github.com/moonsdust/unsolved-murders)."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format:
  pdf:
    toc: true
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(arrow)
library(ggplot2)
library(modelsummary)
library(rstanarm)
library(dplyr)
library(knitr)
library(DiagrammeR)
library(rsvg)
library(DiagrammeRsvg)
library(png)

# Read in analysis data
analysis_data_homicides <- 
  read_parquet("../data/02-analysis_data/cleaned_data_homicides.parquet")
# Read in model data
unsolved_model_results <- readRDS("../models/unsolved_homicide_model.rds")
```

# Introduction

Overview paragraph

This led to us investigate the following question in our paper: what are the differences in homicide case information like the year and city the homicide took place and the victims’ perceived characteristics (age, sex, and race) between solved and unsolved homicides in 2 of the largest cities in the United States, New York and Los Angeles, from 2010 to 2017?

Estimand paragraph

Results paragraph

Why it matters paragraph

Telegraphing paragraph: The remainder of this paper is structured as follows. @sec-data....






# Data {#sec-data}

## Overview

We use the statistical programming language R [@citeR].... Our data [@datahomicides].... Following @citetellingstories, we consider...

Overview text

## Measurement
	
Some paragraphs about how we go from a phenomena in the world to an entry in the dataset.


Limitation of dataset. 
- There’s only data available from 2010 onwards for both New York and Los Angeles 
- Not all victims were able to be identified and they were removed from the dataset during data cleaning

## Outcome variables

Add graphs, tables and text. Use sub-sub-headings for each outcome variable or update the subheading to be singular.



Some of our data is of penguins (@fig-bills), from @palmerpenguins.

Talk more about it.

And also planes (@fig-planes). (You can change the height and width, but don't worry about doing that until you have finished every other aspect of the paper - Quarto will try to make it look nice and the defaults usually work well once you have enough text.)


Talk way more about it. 

## Predictor variables

Add graphs, tables and text.

Use sub-sub-headings for each outcome variable and feel free to combine a few into one if they go together naturally.






\newpage

# Model {#sec-model}

Based on 

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


## Model justification

```{r}
#| label: fig-causal-model
#| fig-cap: Causal relationship between homicide case information and homicide case being unsolved 
#| echo: false
#| warning: false
#| message: false

# Referenced code from: https://stackoverflow.com/questions/42737645/how-to-export-images-of-diagrammer-in-r and https://www.erikigelstrom.com/articles/causal-graphs-in-r-with-diagrammer/
causal_model <- "digraph { graph []
  # Nodes
  node [shape = plaintext]
    A [label = 'Case being unsolved']
    B [label = 'Race of victim']
    C [label = 'Age of victim']
    D [label = 'Sex of victim']
    E [label = 'City']
    F [label = 'Date (Year)']
    G [label = 'Resources of investigating team (Confounder)']
  edge []
    B->A
    C->A
    D->A
    E->A
    F->A
{ rank = same; }
  # Confounding variables's edges 
  edge [style = dashed]
    G -> A
    G -> E
    G -> F
}"
# Export diagram as a png
exporting_image <- grViz(causal_model) |>
  export_svg() |>
  charToRaw() |>
  rsvg_png("../other/sketches/casual_model.png", width = 1000)

# NOTE: Needed to save diagram and read it in as an image since grViz doesn't render in PDFs
# Referenced https://stackoverflow.com/questions/23861000/displaying-images-in-r-in-version-3-1-0
the_image <- readPNG("../other/sketches/casual_model.png")
plot.new()
rasterImage(the_image, 0,0,1.05,1)
```
RSME calculation 




\newpage

# Results {#sec-results}

## Differences in Homicide Case Information Between Solved and Unsolved Cases in New York and Los Angeles (2010 to 2017)

### Date (Month and Year)
```{r}
#| label: fig-month-bar
#| fig-cap: "Number of solved and unsolved homicides across the 12 months of a year in Los Angeles and New York (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_month <- 
  analysis_data_homicides |>
  # Group by solved and unsolved homicides 
  group_by(arrest_was_not_made) |>
  # Count number of solved and unsolved homicides for each month
  count(month)|>
  # Rename count column
  rename(
    "num_of_cases_month" = n
  ) |>
  mutate(
    month = case_when(
      (month == 1) ~ "Jan",
      (month == 2) ~ "Feb",
      (month == 3) ~ "Mar",
      (month == 4) ~ "Apr",
      (month == 5) ~ "May",
      (month == 6) ~ "Jun",
      (month == 7) ~ "Jul",
      (month == 8) ~ "Aug",
      (month == 9) ~ "Sep",
      (month == 10) ~ "Oct",
      (month == 11) ~ "Nov",
      (month == 12) ~ "Dec",
      TRUE ~ "None")
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  )

# To sort month in certain order 
# Referenced: https://www.geeksforgeeks.org/how-to-put-x-axis-in-order-month-in-r/ for code
number_of_cases_month$month <- factor(number_of_cases_month$month, levels = c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))

number_of_cases_month |>
  ggplot(mapping = aes(x = month, y = num_of_cases_month)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(arrest_was_not_made), dir = "v") +
  geom_bar(stat = "identity", fill = "#936639") +
  theme_minimal() +
  labs(x = "Month of the year", y = "Number of homicide cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: fig-year-bar
#| fig-cap: "Number of solved and unsolved homicides from 2010 to 2017 in Los Angeles and New York"
#| echo: false
#| warning: false
#| message: false

number_of_cases_year <- 
  analysis_data_homicides |>
  # Group by solved and unsolved homicides 
  group_by(arrest_was_not_made) |>
  # Count number of solved and unsolved homicides for each year
  count(year)|>
  # Rename count column
  rename(
    "num_of_cases_year" = n
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  )

number_of_cases_year |>
  ggplot(mapping = aes(x = as.character(year), y = num_of_cases_year)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(arrest_was_not_made), dir = "v") +
  geom_bar(stat = "identity", fill = "#936639") +
  theme_minimal() +
  labs(x = "Year", y = "Number of homicide cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: fig-year-month-heatmap
#| fig-cap: "Number of solved and unsolved homicides from January to December from 2010 to 2017 in Los Angeles and New York"
#| echo: false
#| warning: false
#| message: false

number_of_cases_year_month <- 
  analysis_data_homicides |>
  # Group by solved and unsolved homicides and year
  group_by(arrest_was_not_made, year) |>
  # Count number of solved and unsolved homicides for each month per year 
  count(month)|>
  # Rename count column
  rename(
    "num_of_cases_month_year" = n
  ) |>
  mutate(
    month = case_when(
      (month == 1) ~ "Jan",
      (month == 2) ~ "Feb",
      (month == 3) ~ "Mar",
      (month == 4) ~ "Apr",
      (month == 5) ~ "May",
      (month == 6) ~ "Jun",
      (month == 7) ~ "Jul",
      (month == 8) ~ "Aug",
      (month == 9) ~ "Sep",
      (month == 10) ~ "Oct",
      (month == 11) ~ "Nov",
      (month == 12) ~ "Dec",
      TRUE ~ "None")
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  )

# To sort month in certain order 
# Referenced: https://www.geeksforgeeks.org/how-to-put-x-axis-in-order-month-in-r/ for code
number_of_cases_year_month$month <- factor(number_of_cases_year_month$month, levels = c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))

# Referenced: https://stackoverflow.com/questions/12998372/heatmap-like-plot-but-for-categorical-variables to help create heatmap
number_of_cases_year_month |>
  ggplot(mapping = aes(x = month, y = year)) +
  geom_tile(aes(fill = num_of_cases_month_year)) + 
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(arrest_was_not_made), dir = "v") +
  scale_fill_gradient(low = "#c2c5aa", high = "#7f4f24", name = "Number of homicides") +
  theme_minimal() +
  labs(x = "Month", y = "Year") 
  # theme(legend.position = "bottom")
```


### City 

```{r}
#| label: fig-city-bar
#| fig-cap: "Proportion of solved and unsolved homicides in Los Angeles and New York (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_city <- 
  analysis_data_homicides |>
  # Group by city 
  group_by(city) |>
  # Count number of solved and unsolved homicides for each city
  count(arrest_was_not_made)|>
  # Rename count column
  rename(
    "num_of_cases_city" = n
  ) |>
  mutate(
    "proportion_of_cases" = round(num_of_cases_city/sum(num_of_cases_city), 2)
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  ) 

number_of_cases_city |>
  ggplot(mapping = aes(x = arrest_was_not_made, y = proportion_of_cases)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(city)) +
  geom_bar(stat = "identity", fill = "#936639") +
  theme_minimal() +
  labs(x = "Status of the homicide case", y = "Proportion of cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: tbl-city-table
#| tbl-cap: "Proportion and number of solved and unsolved homicides in Los Angeles and New York (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_city |>
  rename(
    "City" = city, 
    "Status of the homicide case" = arrest_was_not_made,
    "Proportion of cases" = proportion_of_cases,
    "Number of cases" = num_of_cases_city
  ) |>
  kable()
```

### Disposition
```{r}
#| label: fig-disposition-bar
#| fig-cap: "Disposition of homicide cases in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_dispositions_city <- 
  analysis_data_homicides |>
  # Group by city 
  group_by(city) |>
  # Count number of dispositions for each city
  count(disposition)|>
  # Rename count column
  rename(
    "num_of_disposition_city" = n
  )

number_of_dispositions_city |>
  ggplot(mapping = aes(x = disposition, y = num_of_disposition_city)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(city), dir = "v") +
  geom_bar(stat = "identity", fill = "#936639") +
  theme_minimal() +
  labs(x = "Disposition of homicide", y = "Number of cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: tbl-disposition-table
#| tbl-cap: "Disposition of homicide cases in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

# Create table for dataframe pertaining to the number of cases per year
number_of_dispositions_city |>
  rename(
    "City" = city,
    "Disposition of the homicide case" = disposition,
    "Number of cases" = num_of_disposition_city
  ) |>
  kable()
```

\newpage

### Victim's Age 
```{r}
#| label: fig-victim-age-histogram
#| fig-cap: "Distribution of victim's age in solved and unsolved homicides in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

victim_age_dataframe <- 
  analysis_data_homicides |>
  # Group by age 
  group_by(victim_age) |>
  # Count number of solved and unsolved homicides by age
  count(arrest_was_not_made)|>
  # Rename count column
  rename(
    "num_of_cases" = n
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  ) 

# Referenced Telling Stories with Data by Rohan Alexander for histogram code: https://tellingstorieswithdata.com/05-graphs_tables_maps.html#histograms
victim_age_dataframe |>
  ggplot(aes(x = victim_age, fill = arrest_was_not_made)) +
  geom_histogram(position = "dodge") +
  theme_minimal() +
  scale_fill_manual(values=c("#936639", "#c2c5aa")) +
  labs(
    x = "Age of victim",
    y = "Number of cases",
    fill = "Status of homicide"
  ) +
  theme(legend.position = "bottom")
```

### Victim's Sex
```{r}
#| label: fig-victim-sex-bar
#| fig-cap: "Proportion of homicide cases per sex in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_victim_sex <- 
  analysis_data_homicides |>
  # Group by victim's sex 
  group_by(victim_sex) |>
  # Count number of solved and unsolved homicides for each sex
  count(arrest_was_not_made)|>
  # Rename count column
  rename(
    "num_of_cases_victim_sex" = n
  ) |>
  mutate(
    "proportion_of_cases" = round(num_of_cases_victim_sex/sum(num_of_cases_victim_sex), 2)
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  ) 

number_of_cases_victim_sex |>
  ggplot(mapping = aes(x = victim_sex, y = proportion_of_cases)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(arrest_was_not_made)) +
  geom_bar(stat = "identity", fill = "#a4ac86") +
  theme_minimal() +
  labs(x = "Victim's Sex", y = "Proportion of cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: tbl-victim-sex-table
#| tbl-cap: "Proportion and number of homicide cases per sex in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_victim_sex |>
  rename(
    "Victim's sex" = victim_sex, 
    "Status of the homicide case" = arrest_was_not_made,
    "Proportion of cases" = proportion_of_cases,
    "Number of cases" = num_of_cases_victim_sex
  ) |>
  kable()
```


### Victim's Race 
```{r}
#| label: fig-victim-race-bar
#| fig-cap: "Number of homicide cases per race in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_victim_race <- 
  analysis_data_homicides |>
  # Group by victim's race 
  group_by(victim_race) |>
  # Count number of solved and unsolved homicides for each race
  count(arrest_was_not_made)|>
  # Rename count column
  rename(
    "num_of_cases_victim_race" = n
  ) |>
  mutate(
    arrest_was_not_made = case_when(
      (arrest_was_not_made == 1) ~ "Arrest was not made",
      (arrest_was_not_made == 0) ~ "Arrest was made",
      TRUE ~ "None")
  ) 

number_of_cases_victim_race |>
  ggplot(mapping = aes(x = victim_race, y = num_of_cases_victim_race)) +
  # Creates two graphs based on the status of the case
  facet_wrap(facets = vars(arrest_was_not_made)) +
  geom_bar(stat = "identity", fill = "#a4ac86") +
  theme_minimal() +
  labs(x = "Victim's Race", y = "Number of cases") +
  theme(legend.position = "bottom")
```

```{r}
#| label: tbl-victim-race-table
#| tbl-cap: "Number of homicide cases per sex in New York and Los Angeles (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

number_of_cases_victim_race |>
  rename(
    "Victim's race" = victim_race, 
    "Status of the homicide case" = arrest_was_not_made,
    "Number of cases" = num_of_cases_victim_race
  ) |>
  kable()
```

\newpage
## Model Results {#sec-model-results}
```{r}
#| label: tbl-model-result
#| tbl-cap: Relationship between a homicide being unsolved from 2010 to 2017 with the city and year a victim is found in/on and the race, age, and sex of a victim. Mean absolute deviation (MAD) values are in parenthesis.
#| echo: false
#| warning: false
#| message: false

modelsummary(
  # List out unsolved_model_results information
  list("Unsolved homicides (2010 to 2017)" = unsolved_model_results),
  # Specify MAD as the statistic
  statistic = "mad"
)
```

```{r}
#| label: fig-model-result-ci
#| fig-cap: The credible intervals (line) for coefficient estimates (dot) of predictor variables for homicides that go unsolved from 2010 to 2017.
#| echo: false
#| warning: false
#| message: false
# Specify credible interval to be 90% and present model results
modelplot(unsolved_model_results, conf_level = 0.9) +
  labs(x = "90 per cent credible interval")
```

\newpage
# Discussion {#sec-discussion}

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

Please don't use these as sub-heading labels - change them to be what your point actually is.

## Third discussion point

## Areas of improvement and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {#sec-appendix}

## Note on Reproducing

In order to reproduce the results in the paper, first run the 00-install_packages.R in the scripts folder located in this paper’s GitHub repository. Then run the other scripts based on the number at the beginning of the script name.

## Acknowledgments

We would like to thank @citetellingstories for providing assistance with the R code used to produce the tables and graphs in this paper.

## Code styling

Code written in the scripts was checked and styled with lintr [@citelintr] and styler [@citestyler].

## Additional Tables

```{r}
#| label: tbl-month-table
#| tbl-cap: "Number of solved and unsolved homicides across the 12 months of a year in Los Angeles and New York (2010 to 2017)"
#| echo: false
#| warning: false
#| message: false

# Create table for the number of cases per month
number_of_cases_month |>
  rename(
    "Month" = month,
    "Status of the homicide case" = arrest_was_not_made,
    "Number of cases in the month" = num_of_cases_month
  ) |>
  kable()
```


```{r}
#| label: tbl-year-table
#| tbl-cap: "Number of solved and unsolved homicides from 2010 to 2017 in Los Angeles and New York"
#| echo: false
#| warning: false
#| message: false

# Create table for dataframe pertaining to the number of cases per year
number_of_cases_year |>
  rename(
    "Year" = year,
    "Status of the homicide case" = arrest_was_not_made,
    "Number of cases in the year" = num_of_cases_year
  ) |>
  kable()
```

\newpage
## Idealized Survey and Methodology {#subsec-ideal-survey}
- Link to literature

### Idealized Survey Objectives

### Sampling Approach

### Respondent Recruitment

### Data Validation

### Idealized Survey Design

### Link to Idealized Survey
- Using Google Forms

### Limitations

### Idealized Survey Questions
- Should have an introductory section and include details of a contact person
- Question type should be varied and appropriate.
- Have a final section that thank the respondents


\newpage 
## Overview and Evaluation of The Washington Post’s Dataset
- TODO: Make sure to link evaluation to literature

### Overview 

### Sampling Approach
- what is the population, frame, and sample;
- how is the sample recruited;
- what sampling approach is taken, and what are some of the trade-offs of this; 
- how is non-response handled;

### Strengths and limitations
- what is good and bad about the sampling.

\newpage

## Model details {#sec-model-details}

### Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

pp_check(unsolved_model_results) +
  theme_classic() +
  theme(legend.position = "bottom")

posterior_vs_prior(unsolved_model_results) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom") +
  coord_flip()
```


### Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...


```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

plot(unsolved_model_results, "trace")

plot(unsolved_model_results, "rhat")
```


\newpage


# References


